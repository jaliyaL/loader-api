Perfect ðŸš€ Letâ€™s focus on **LoaderAPI** with gRPC first. Weâ€™ll make it clean and minimal but production-style.

---

## ðŸ“¦ Project structure

```
loader-api/
â”œâ”€â”€ go.mod
â”œâ”€â”€ proto/
â”‚   â””â”€â”€ loader.proto
â””â”€â”€ server/
    â””â”€â”€ main.go
```

---

## ðŸ›  Step 1: Define the Proto file

`proto/loader.proto`

```proto
syntax = "proto3";

package loader;

option go_package = "loader-api/proto;loaderpb";

// Loader service for generating todos
service LoaderService {
  rpc GenerateLoad (LoadRequest) returns (LoadResponse);
}

message LoadRequest {
  int32 count = 1; // number of todos to generate
}

message Todo {
  int32 id = 1;
  string title = 2;
}

message LoadResponse {
  repeated Todo todos = 1;
}
```

---

## ðŸ›  Step 2: Generate Go code

From project root:

```bash
protoc --go_out=. --go-grpc_out=. proto/loader.proto
```

This creates:

* `proto/loader.pb.go`
* `proto/loader_grpc.pb.go`

---

## ðŸ›  Step 3: Implement the gRPC server

`server/main.go`

```go
package main

import (
	"context"
	"fmt"
	"log"
	"math/rand"
	"net"
	"time"

	pb "loader-api/proto"

	"google.golang.org/grpc"
)

type loaderServer struct {
	pb.UnimplementedLoaderServiceServer
}

// GenerateLoad generates fake todo tasks
func (s *loaderServer) GenerateLoad(ctx context.Context, req *pb.LoadRequest) (*pb.LoadResponse, error) {
	var todos []*pb.Todo
	for i := 1; i <= int(req.Count); i++ {
		t := &pb.Todo{
			Id:    int32(i),
			Title: fmt.Sprintf("Task %d - %s", i, randomTitle()),
		}
		todos = append(todos, t)
	}
	return &pb.LoadResponse{Todos: todos}, nil
}

func randomTitle() string {
	titles := []string{
		"Write unit tests",
		"Fix bug in auth service",
		"Review PR",
		"Update docs",
		"Refactor API handler",
	}
	rand.Seed(time.Now().UnixNano())
	return titles[rand.Intn(len(titles))]
}

func main() {
	lis, err := net.Listen("tcp", ":50051")
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	grpcServer := grpc.NewServer()
	pb.RegisterLoaderServiceServer(grpcServer, &loaderServer{})

	log.Println("âš¡ LoaderService running on port :50051")
	if err := grpcServer.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
```

---

## ðŸ›  Step 4: Run the server

```bash
go run server/main.go
```

Output:

```
âš¡ LoaderService running on port :50051
```

---

At this point, you have a **gRPC Loader API** running that generates fake todos âœ….

ðŸ‘‰ Next, we can build a **Go client** (which later will be part of your Todo App) to call this LoaderAPI.

Do you want me to show you the client code now?
